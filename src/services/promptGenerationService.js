const OpenAI = require('openai');
const Logger = require('../utils/logger');
const config = require('../config/config');

/**
 * Service for generating Prompt 1 and Prompt 2 from a Master Prompt using OpenAI
 * Optimized for list-based viral content with visual consistency
 */
class PromptGenerationService {
  constructor() {
    // Initialize OpenAI client
    this.openai = new OpenAI({
      apiKey: config.openaiApiKey || process.env.OPENAI_API_KEY,
    });

    // System prompt for generating visually consistent prompts optimized for TikTok/social media
    this.systemPrompt = `You are an expert at creating viral TikTok/Instagram Reels/YouTube Shorts video prompts for Sora AI video generation.

Your task: Take a MASTER PROMPT (like "Top 3 AI Tools" or "5 Best Apps") and dynamically generate TWO video prompts that showcase SPECIFIC ITEMS from that list.

CRITICAL: 20-SECOND SHORT-FORM CONTENT (10 SECONDS PER VIDEO)

1. DURATION & PACING (CRITICAL):
   - Each video is EXACTLY 10 SECONDS when generated by Sora
   - Total stitched video = 20 seconds (perfect for TikTok/Shorts)
   - FAST-PACED: Quick cuts, rapid actions, no slow moments
   - Hook within first 2 seconds
   - Keep it punchy, dynamic, high-energy
   - Every second must be valuable - no filler

2. SORA COMPLIANCE (CRITICAL - NO BRAND VIOLATIONS):
   - DO NOT show real brand logos (no ChatGPT logo, no Midjourney logo, etc.)
   - DO NOT show specific copyrighted UI designs
   - USE generic interfaces: "AI chat interface" not "ChatGPT interface"
   - USE generic devices: "smartphone screen" not "iPhone with ChatGPT"
   - TEXT OVERLAYS can mention tool names (Sora can generate text)
   - FOCUS on the action/concept, not the branded product
   - Example: Show "person typing into AI chatbot on phone" + text overlay "#3 CHATGPT"

3. SHOW REAL, SPECIFIC ITEMS (via text overlays, not logos):
   - Prompt 1 = Item #3 or #2 from the list (name in TEXT OVERLAY only)
   - Prompt 2 = Item #2 or #1 from the list (name in TEXT OVERLAY only)
   - Example: If "Top 3 AI Tools" â†’ Generic AI interfaces + text overlays with names
   - Show generic tools being used (no branded UIs)
   - Include text overlays with item numbers and names

4. TIKTOK/SHORTS VISUAL STYLE:
   - Attention-grabbing opening (close-ups, dramatic reveals)
   - Generic phone/computer screens (no brand-specific devices)
   - Clean, modern, high-quality aesthetic
   - Text overlays are VISIBLE and PROMINENT (Sora can generate text)
   - Stop-the-scroll visual hooks
   - Short-form vertical or horizontal framing
   - Quick transitions between elements

5. VISUAL CONSISTENCY (MUST MATCH):
   - Same color grading (neon blues/purples or warm/bright)
   - Same lighting setup (screen glow, ring light, dramatic)
   - Same camera style (POV, over-shoulder, screen focus)
   - Same mood/energy level
   - Same text overlay style

6. EACH 10-SECOND PROMPT STRUCTURE:
   - FAST OPENING: Immediate hook (0-2 sec)
   - SHOW THE CONCEPT: Quick reveal of generic interface (2-4 sec)
   - TEXT OVERLAY: Bold text with item number and name (e.g., "#3 CHATGPT - INSTANT ESSAYS")
   - ACTION: Rapid demonstration of concept in use (4-7 sec)
   - RESULT: Quick payoff/wow moment (7-10 sec)
   - Generic devices (smartphone, laptop, computer screen - no specific brands)
   - Hands/user interaction visible
   - Screen glow lighting for dramatic effect

7. CONTENT TYPES BY CATEGORY:

   AI TOOLS/APPS (10-second rapid demo):
   - Generic AI interface reveal (NO branded UI)
   - Tool name in TEXT OVERLAY only
   - Fast demonstration with instant results
   - Example: "Generic AI chat interface typing essay" + overlay "#3 CHATGPT"

   PREDICTIONS/FACTS (10-second quick story):
   - Fast visual representation
   - Quick cut to proof/evidence
   - Text overlay with key info
   - Dramatic reveal at end
   - No copyrighted news footage

   PRODUCTS/ITEMS (10-second showcase):
   - Quick generic product reveal
   - Rapid feature demonstration
   - Immediate benefit/result shown
   - Fast, energetic pacing
   - Avoid showing brand logos

RESPONSE FORMAT (JSON):
{
  "prompt1": "Specific detailed prompt for item #3 or #2...",
  "prompt2": "Specific detailed prompt for item #2 or #1..."
}

EXAMPLE (SORA-COMPLIANT):
Master Prompt: "Top 3 AI Tools That Feel Illegal"

Response:
{
  "prompt1": "10-second fast-paced shot: Smartphone screen showing generic AI chatbot interface with blue and purple gradient design, immediate close-up on screen (0-2s), bold text overlay '#3 CHATGPT - INSTANT ESSAYS' appears in corner (2s), fingers rapidly typing 'write college essay about history' as text generates automatically on screen in real-time (2-7s), finger frantically scrolling through walls of perfect paragraphs appearing (7-9s), quick zoom showing amazed person's face in background lit by screen glow (9-10s). Dark room, bright screen glow casting blue light, dramatic lighting, high-energy vertical format, professional quality",
  "prompt2": "10-second dynamic shot: Laptop screen displaying generic AI image generator with sleek dark interface, quick close-up of hands typing text prompt 'astronaut riding horse on mars' (0-2s), text overlay '#2 AI IMAGE TOOL - INSTANT ART' flashes prominently (2s), rapid progress animation as photorealistic image materializes on screen tile by tile (2-6s), dramatic full reveal of stunning artwork appearing on display (6-8s), hand pointing excitedly at final masterpiece while user reacts with amazement (8-10s). Same dark room setup, identical blue screen glow lighting, matching color scheme, same fast-paced energy, professional aesthetic"
}

Notice: NO brand logos, NO specific UIs (ChatGPT/Midjourney logos removed), generic interfaces only, tool names in TEXT OVERLAYS, same visual style, Sora-compliant.`;
  }

  /**
   * Generate two prompts from a master prompt using OpenAI
   * @param {string} masterPrompt - The master concept/theme
   * @param {string} aspectRatio - Video aspect ratio (landscape/portrait/square)
   * @returns {Promise<{prompt1: string, prompt2: string}>}
   */
  async generatePrompts(masterPrompt, aspectRatio = 'landscape') {
    Logger.info('Generating prompts from master prompt using OpenAI', {
      masterPrompt,
      aspectRatio,
    });

    try {
      // Add aspect ratio guidance to the user message
      const aspectRatioGuidance = this.getAspectRatioGuidance(aspectRatio);
      const userMessage = `Master Prompt: "${masterPrompt}"\n\n${aspectRatioGuidance}\n\nIMPORTANT: Generate TWO 10-SECOND video prompts (20 seconds total when stitched). Each prompt must be FAST-PACED with viral TikTok/Shorts energy.\n\nSORA COMPLIANCE (CRITICAL):\n- NO brand logos or trademarks visible\n- NO specific copyrighted UI designs (use "generic AI interface" not "ChatGPT interface")\n- Tool names ONLY in text overlays\n- Generic devices (smartphone, laptop) not specific brands\n\nMUST INCLUDE:\n- Bold text overlays with item numbers and tool names\n- Quick, attention-grabbing demonstrations\n- Identical visual style, lighting, and mood between both prompts\n- High-energy, no filler, every second counts!`;

      // Call OpenAI API
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4-turbo', // Using GPT-4 Turbo (latest available model)
        messages: [
          {
            role: 'system',
            content: this.systemPrompt,
          },
          {
            role: 'user',
            content: userMessage,
          },
        ],
        temperature: 0.8, // Higher creativity for specific tool/app suggestions
        max_tokens: 1500, // More tokens for detailed TikTok-style prompts
        response_format: { type: 'json_object' }, // Force JSON response
      });

      // Parse the response
      const content = response.choices[0].message.content;
      const parsedResponse = JSON.parse(content);

      if (!parsedResponse.prompt1 || !parsedResponse.prompt2) {
        throw new Error('OpenAI response missing prompt1 or prompt2');
      }

      Logger.info('Prompts generated successfully via OpenAI', {
        prompt1Length: parsedResponse.prompt1.length,
        prompt2Length: parsedResponse.prompt2.length,
      });

      return {
        prompt1: parsedResponse.prompt1,
        prompt2: parsedResponse.prompt2,
      };
    } catch (error) {
      Logger.error('Error generating prompts with OpenAI', error);
      throw new Error(`Failed to generate prompts: ${error.message}`);
    }
  }

  /**
   * Get aspect ratio specific guidance
   */
  getAspectRatioGuidance(aspectRatio) {
    const guidance = {
      landscape:
        'LANDSCAPE (16:9): Frame like YouTube/TikTok horizontal content. Device screen should dominate frame with person/hands visible. Over-shoulder laptop/phone view works great.',
      portrait:
        'PORTRAIT (9:16): Frame for TikTok/Instagram Reels vertical format. Phone screen fills most of frame, shot from above or straight-on. Perfect for phone-in-hand POV.',
      square:
        'SQUARE (1:1): Frame for Instagram feed. Center the device screen with balanced spacing. Good for product showcase centered in frame.',
    };

    return (
      guidance[aspectRatio] ||
      'Use wide cinematic framing optimized for landscape viewing.'
    );
  }
}

module.exports = new PromptGenerationService();
